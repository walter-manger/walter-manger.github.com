<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>To The Triforce</title>
    <link>http://wmanger.com/</link>
    <description>Recent content on To The Triforce</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Apr 2016 14:21:14 -0600</lastBuildDate>
    <atom:link href="http://wmanger.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>My first contribution to an Emacs package</title>
      <link>http://wmanger.com/post/2016-04-03/</link>
      <pubDate>Sun, 03 Apr 2016 14:21:14 -0600</pubDate>
      
      <guid>http://wmanger.com/post/2016-04-03/</guid>
      <description>

&lt;p&gt;This week I was experimenting with tracking time for work. The goal was to not leave Emacs (as it always is) and be able to adhere to the time tracking software that the company that I work for uses, &lt;a href=&#34;https://www.getharvest.com/&#34;&gt;Harvest&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A quick search produced &lt;a href=&#34;https://github.com/kostajh/harvest.el&#34;&gt;harvest.el&lt;/a&gt;, which was exactly what I needed. After experimenting by tracking a few tasks I noticed that the &lt;em&gt;clock out&lt;/em&gt; function was not working properly. What the function was documented to do was clock out of any running clocked entry. Luckily, I had a little bit of downtime at work and I, forked the repo, opened up the source and began to debug Elisp the only way I know how:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fb660a&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;What is this doing? %s&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #fb660a&#34;&gt;something&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Surprisingly, I was able to figure out the issue pretty quickly (about 15 minutes of hacking). There was what looked like a new variable to keep cached task entries that was not properly being referenced. Basically, there is an operator in Elisp that creates a list, it looks something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;&amp;#39;(&lt;/span&gt;&lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic; background-color: #0f140f&#34;&gt;;; produces a list with elements 1 2 3&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-style: italic; background-color: #0f140f&#34;&gt;;; =&amp;gt; (1 2 3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The function that was causing the problem in my case was taking a variable, that had previously been set to a list of elements and using the &lt;em&gt;&amp;lsquo;&lt;/em&gt; operator on that list. Which produces entirely different results. Using my example above:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;&amp;#39;(&amp;#39;(&lt;/span&gt;&lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;))&lt;/span&gt; 
&lt;span style=&#34;color: #008800; font-style: italic; background-color: #0f140f&#34;&gt;;; =&amp;gt; (quote (1 2 3))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This produced entirely different results and in the context of the function, was unusable. All that needed to be done here was removing the list operator wrapping &lt;em&gt;&amp;rsquo;()&lt;/em&gt;. Here&amp;rsquo;s a peek at my pull request: &lt;a href=&#34;https://github.com/kostajh/harvest.el/pull/15&#34;&gt;PR #15&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-moral-of-this-story-contribute-when-you-can:93bf0e0c1aa53e7b4c0297c4e30c3f29&#34;&gt;The moral of this story: Contribute when you can&lt;/h3&gt;

&lt;p&gt;This fix took me about 30 minutes of total time. That included getting the Pull Request ready for the author. The author appreciated the help and perhaps many of the package users will appreciate it too. We should all help when we can. I learned a little more about Elisp along the way, so it wasn&amp;rsquo;t all giving and not receiving.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Easing Into Hugo Automation with Emacs: Part 1</title>
      <link>http://wmanger.com/post/2016-03-22/</link>
      <pubDate>Tue, 22 Mar 2016 21:53:53 -0600</pubDate>
      
      <guid>http://wmanger.com/post/2016-03-22/</guid>
      <description>&lt;p&gt;After reading a post on  &lt;a href=&#34;http://endlessparentheses.com/how-i-blog-one-year-of-posts-in-a-single-org-file.html&#34;&gt;Endless Parentheses&lt;/a&gt; about the author&amp;rsquo;s blogging workflow I instantly felt compelled to do something similar. Being an Emacs user, the thought of living inside of Emacs for as long as possible is always attractive. Of course, I &lt;em&gt;could&lt;/em&gt; have simply used his configuration as he&amp;rsquo;s pointed to some of his configuration on GitHub&amp;rsquo;s, but his flow involves Jekyll, and I am using Hugo. Moreover, coming up with my own flow and possibly porting a package would be a good way for an elisp beginner to gain some knowledge.&lt;/p&gt;

&lt;p&gt;So, here&amp;rsquo;s my first step at making Hugo play well with Emacs.&lt;/p&gt;

&lt;p&gt;First, I wanted to be able to &lt;em&gt;capture&lt;/em&gt; a post quickly. By using Org-Mode&amp;rsquo;s capture templates, this was pretty easy.&lt;/p&gt;

&lt;p&gt;(Somewhere in my &lt;em&gt;init.el&lt;/em&gt;)&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color: #fb660a&#34;&gt;org-capture-templates&lt;/span&gt;
      &lt;span style=&#34;color: #ffffff&#34;&gt;&amp;#39;(&lt;/span&gt;&lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;Post&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #fb660a&#34;&gt;plain&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fb660a&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fb660a&#34;&gt;wm/hugo-new&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;))&lt;/span&gt;
        &lt;span style=&#34;color: #ffffff&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fb660a&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;~/path-to-template-file&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;wm/hugo-new&lt;/code&gt; function here just creates a file name with today&amp;rsquo;s date. This is what that function looks like:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;(defun&lt;/span&gt; &lt;span style=&#34;color: #fb660a&#34;&gt;today-is&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;()&lt;/span&gt;
  &lt;span style=&#34;color: #ffffff&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fb660a&#34;&gt;format-time-string&lt;/span&gt; &lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;%Y-%m-%d&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;))&lt;/span&gt;

&lt;span style=&#34;color: #ffffff&#34;&gt;(defun&lt;/span&gt; &lt;span style=&#34;color: #fb660a&#34;&gt;wm/hugo-new&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;()&lt;/span&gt;
  &lt;span style=&#34;color: #ffffff&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fb660a&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fb660a&#34;&gt;file-name-as-directory&lt;/span&gt; &lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;~/path-to-hugo-posts&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #ffffff&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fb660a&#34;&gt;today-is&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;.md&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the template that I am using is just the basic hugo template, with a custom function for formatting the date the way that Hugo likes it.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;+++
Categories = []
Description = &amp;quot;&amp;quot;
Tags = []
date = &amp;quot;%(wm/insert-date-time)&amp;quot;
menu = &amp;quot;main&amp;quot;
title = &amp;quot;&amp;quot;
+++

%?
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;wm/insert-date-time&lt;/code&gt; function:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;(defun&lt;/span&gt; &lt;span style=&#34;color: #fb660a&#34;&gt;wm/insert-date-time&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;()&lt;/span&gt;
  &lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;Insert current date-time string in full ISO 8601 format.&lt;/span&gt;
&lt;span style=&#34;color: #0086d2&#34;&gt;Example: 2010-11-29T23:23:35-08:00&amp;quot;&lt;/span&gt;
   &lt;span style=&#34;color: #ffffff&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fb660a&#34;&gt;concat&lt;/span&gt;
    &lt;span style=&#34;color: #ffffff&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fb660a&#34;&gt;format-time-string&lt;/span&gt; &lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;%Y-%m-%dT%T&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #ffffff&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;lambda&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fb660a&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fb660a&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fb660a&#34;&gt;substring&lt;/span&gt; &lt;span style=&#34;color: #fb660a&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fb660a&#34;&gt;substring&lt;/span&gt; &lt;span style=&#34;color: #fb660a&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;)))&lt;/span&gt;
     &lt;span style=&#34;color: #ffffff&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fb660a&#34;&gt;format-time-string&lt;/span&gt; &lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;%z&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;At this point, I can hit &lt;code&gt;C-c c p&lt;/code&gt; and the screen splits vertically with a new markdown file created with the template ready to go. I just need to fill out the title, categories, and main content and hit &lt;code&gt;C-c C-c&lt;/code&gt; to save the post and get back to any work that I was doing before I started the post.&lt;/p&gt;

&lt;p&gt;Now that I have the file saved, I would like to be able to call the Hugo CLI to serve up the post I just created as well as build the posts to get them ready for publishing/pushing.&lt;/p&gt;

&lt;p&gt;The base solution is eshell aliases.&lt;/p&gt;

&lt;p&gt;In my &lt;code&gt;eshell/alias&lt;/code&gt; file, I have 3 entries that help with Hugo.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #fb660a&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #fb660a&#34;&gt;blog-serve&lt;/span&gt; &lt;span style=&#34;color: #fb660a&#34;&gt;hugo&lt;/span&gt; &lt;span style=&#34;color: #fb660a&#34;&gt;-s=&lt;/span&gt;&lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;~/path-to-blog-src&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #fb660a&#34;&gt;server&lt;/span&gt;
&lt;span style=&#34;color: #fb660a&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #fb660a&#34;&gt;blog-browse&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fb660a&#34;&gt;browse-url&lt;/span&gt; &lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;http://localhost:1313&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #fb660a&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #fb660a&#34;&gt;blog-publish&lt;/span&gt; &lt;span style=&#34;color: #fb660a&#34;&gt;hugo&lt;/span&gt; &lt;span style=&#34;color: #fb660a&#34;&gt;-s=&lt;/span&gt;&lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;~/path-to-blog-src&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;blog-serve&lt;/code&gt; starts the server and makes the site available for browsing via the &lt;code&gt;blog-browse&lt;/code&gt; alias. &lt;code&gt;blog-publish&lt;/code&gt; is self-explanatory.&lt;/p&gt;

&lt;p&gt;The capture, along with the functions and these aliases make it pretty easy for me to just whip up a post at the speed of thought, but there is still a little too much manual work here. The next part of this series I will experiment with porting one of the Jekyll packages for use with Hugo. It would be really cool to have an all in one solution for Hugo like there is for Jekyll.&lt;/p&gt;

&lt;p&gt;Until next time&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript is Lovely/Horrible</title>
      <link>http://wmanger.com/post/2016-03-11/</link>
      <pubDate>Fri, 11 Mar 2016 20:53:12 -0700</pubDate>
      
      <guid>http://wmanger.com/post/2016-03-11/</guid>
      <description>&lt;p&gt;I ran into a little issue today that set me back about 4 hours trying to figure out. Luckily, never again will I spend that amount of time trying to slay this issue. The story goes something like this: I had a normalized object, meaning that each object in my object array was given a unique key and made into a property of an outer object instead of an element of an array. This is the desired behavior. Unfortunately, looping through properties of an object is a little more difficult than simply looping through the indices of an array. Not very difficult, but &lt;em&gt;more&lt;/em&gt; difficult than a simple loop over an array. Here&amp;rsquo;s an example structure.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;entities&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #ffffff&#34;&gt;users:&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #ffffff&#34;&gt;user1:&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #ffffff&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;William Shatner&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #ffffff&#34;&gt;age:&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;22&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #ffffff&#34;&gt;weapons:&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;[{id:&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;sword&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;}]&lt;/span&gt;
        &lt;span style=&#34;color: #ffffff&#34;&gt;},&lt;/span&gt;
        &lt;span style=&#34;color: #ffffff&#34;&gt;user2:&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #ffffff&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;William Shakespeare&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #ffffff&#34;&gt;age:&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;2001&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #ffffff&#34;&gt;weapons:&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;[{id:&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;pen&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;}]&lt;/span&gt;
        &lt;span style=&#34;color: #ffffff&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color: #ffffff&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #ffffff&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I was trying to update the weapons property of one of the user with a payload that came back from a server. So, naturally, what I thought I wanted to do was &lt;em&gt;merge&lt;/em&gt; the results from the server with the results in this structure. A quick look at my favorite JS library &lt;em&gt;lodash&lt;/em&gt; and I came up with the following.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;serverEntities&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #ffffff&#34;&gt;users:&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #ffffff&#34;&gt;user1:&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #ffffff&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;William Shatner&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #ffffff&#34;&gt;age:&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;22&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #ffffff&#34;&gt;weapons:&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;[{id:&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;taser&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;}]&lt;/span&gt;
    &lt;span style=&#34;color: #ffffff&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #ffffff&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #ffffff&#34;&gt;};&lt;/span&gt;

&lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;newUsers&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;merge({},&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;users,&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;serverUsers);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The big issue was: merge was basically ignoring the array because merge isn&amp;rsquo;t a &lt;em&gt;deep&lt;/em&gt; merge.&lt;/p&gt;

&lt;p&gt;I settled on just performing a &lt;em&gt;Deep Copy&lt;/em&gt; of what was coming back from the server and placing it where it needed to be in memory.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;merged&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;merge({},&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;entities,&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;serverEntities)&lt;/span&gt;

&lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;Object.keys(serverEntities))&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;innerKey&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;Object.keys(serverEntities[key]))&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #ffffff&#34;&gt;merged[key][innerKey]&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;_.cloneDeep(serverEntitiesntities[key][innerKey])&lt;/span&gt;
    &lt;span style=&#34;color: #ffffff&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #ffffff&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not really flexible because it only allows for the deep copying of the props 2 levels down, but it gets the job done for the moment.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Side Project Scheduling</title>
      <link>http://wmanger.com/post/2016-03-10/</link>
      <pubDate>Thu, 10 Mar 2016 05:48:27 -0700</pubDate>
      
      <guid>http://wmanger.com/post/2016-03-10/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve recently starting getting up earlier to work on side projects. When I say earlier, I mean, at about 4:15AM. This should give me a good 1.5 hours to work on something and get to a point that I can commit something meaningful before I have to start getting ready for my day. The goal is to get that number down to something like 40-45 minutes so I can spend the other half doing something else like reading or researching new technologies. What I am finding is for that 1.5 hours to be effective, planning the night before is pretty important. I&amp;rsquo;ve spent a few mornings getting up to speed for a half hour. It&amp;rsquo;s really important to eliminate that discovery time.&lt;/p&gt;

&lt;h3 id=&#34;what-am-i-working-on:6bb46f5cad8d6c0d6d2277975909ea07&#34;&gt;What am I working on?&lt;/h3&gt;

&lt;p&gt;When I first wanted to learn Go, I started making a game that could be played in Slack in the form of an integration. It is called &lt;a href=&#34;https://github.com/walter-manger/slack-battle&#34;&gt;Slack Battle&lt;/a&gt;. What I thought would be easy to slap together in a night or so is turning out to be a little more difficult than I&amp;rsquo;d planned. Creating games is difficult &amp;ndash; even really simple ones. Add the requirement for playing games over HTTP and the need for some sort of persistence, and the difficulty increases.&lt;/p&gt;

&lt;h3 id=&#34;the-new-plan:6bb46f5cad8d6c0d6d2277975909ea07&#34;&gt;The &lt;em&gt;New&lt;/em&gt; Plan&lt;/h3&gt;

&lt;p&gt;The project was first created with Google App Engine, but coming back to the project after it had aged a bit, I thought that it would be so much simpler not being boxed into what GAE offers. Really, the only thing GAE was providing me was a datastore. I decided to use Mongolab instead. Why? Because it doesn&amp;rsquo;t really box me in. It feels as if I had an instance of Mongo running locally.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Rip Out GAE&lt;/li&gt;
&lt;li&gt;Integrate Mongo &amp;amp; Mongolab&lt;/li&gt;
&lt;li&gt;Refactor for better readability and prepare for testing&lt;/li&gt;
&lt;li&gt;Add tracking &amp;amp; logging&lt;/li&gt;
&lt;li&gt;Actually write tests&lt;/li&gt;
&lt;li&gt;Create a front-end for testing (React / Angular)&lt;/li&gt;
&lt;li&gt;Deploy to (Digital Ocean, Heroku, &amp;hellip;)&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Well, that was fast Mr. Deitel(s)</title>
      <link>http://wmanger.com/post/C_Quickly/</link>
      <pubDate>Thu, 03 Mar 2016 05:57:47 -0700</pubDate>
      
      <guid>http://wmanger.com/post/C_Quickly/</guid>
      <description>&lt;p&gt;I skimmed through most of the first 4 chapters of &lt;em&gt;C How To Program&lt;/em&gt; and then chapter 5 presents functions. I thought that I would continue skimming through, but then I got to the section on &lt;em&gt;Recursion&lt;/em&gt; and the classic introduction to it through implementing the factorial function.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ff0007; font-weight: bold; font-style: italic; background-color: #0f140f&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #cdcaa9; font-weight: bold&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #ff0086; font-weight: bold&#34;&gt;factorial&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cdcaa9; font-weight: bold&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color: #ffffff&#34;&gt;main()&lt;/span&gt;
&lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #cdcaa9; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;i;&lt;/span&gt;
  &lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;(i&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;i++)&lt;/span&gt;
    &lt;span style=&#34;color: #ffffff&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;%2d! = %1d\n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;i,&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;factorial(i));&lt;/span&gt;

  &lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #ffffff&#34;&gt;}&lt;/span&gt;


&lt;span style=&#34;color: #cdcaa9; font-weight: bold&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;factorial(&lt;/span&gt;&lt;span style=&#34;color: #cdcaa9; font-weight: bold&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;number)&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;(number&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;else&lt;/span&gt;
    &lt;span style=&#34;color: #ff0086; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;(number&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;factorial(number&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;color: #ffffff&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I have to admit that I feel like I understand Recursion enough to be dangerous. In college, Recursion was hammered into my head pretty quickly and I was able to reason about it with some mathematical techniques, but I can&amp;rsquo;t say that I had full command of the subject. I am glad that the book has promised to discuss recursion in depth for the next few chapters. I am looking forward to attepting some of the exercises in this chapter.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning C/C&#43;&#43; Again</title>
      <link>http://wmanger.com/post/learning-C-again/</link>
      <pubDate>Tue, 01 Mar 2016 04:57:47 -0700</pubDate>
      
      <guid>http://wmanger.com/post/learning-C-again/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been wanting to get back into C/C++ for a while now, but I was unsure how I would go about creating a learning environment. There are many tutorials available out there, but I tend to lean toward structured learning &amp;ndash; like the way you would learn in a classroom setting. I quickly searched on Reddit and some other outlets about the best books to buy, but after reviewing a few, I was left empty handed. As you can probably imagine, the book that gets recommended the most is K&amp;amp;R&amp;rsquo;s &lt;em&gt;The C Programming Language&lt;/em&gt;. I think that it is a great recommendation, but I read that book cover to cover a few years ago. I was looking for something different as most tech books of this nature get boring quickly and most definitely if you are re-reading it.&lt;/p&gt;

&lt;h3 id=&#34;goodwill-ftw:881acfa8d42cd3861f49dfee4e7fd53d&#34;&gt;Goodwill FTW&lt;/h3&gt;

&lt;p&gt;The other day I went to a near by &lt;em&gt;Goodwill&lt;/em&gt; just to see what kind of books would be available and sure enough, gathered among diet books and romantic novels was: &lt;a href=&#34;http://www.amazon.com/C-How-Program-2nd-Edition/dp/0132261197&#34;&gt;&lt;em&gt;C How To Program 2nd Edition&lt;/em&gt;&lt;/a&gt; by &lt;em&gt;Dietel &amp;amp; Dietel&lt;/em&gt;. This book is likely out of date with best practices for modern C, but what I was looking for was a thorough &lt;em&gt;introduction&lt;/em&gt; to C/C++. This looks like it is what I was looking for. It has pretty good reviews on &lt;em&gt;Amazon&lt;/em&gt; too. I plan on picking up some books on modern best practices after this introduction.&lt;/p&gt;

&lt;h3 id=&#34;schedule:881acfa8d42cd3861f49dfee4e7fd53d&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;I don&amp;rsquo;t intend on spending too much time hammering through the entire book. Just a refresher for the first few chapters by skimming through and writing some of the more difficult programs for each chapter. Pointers are presented in Chapter 7, so that&amp;rsquo;s where I&amp;rsquo;ll likely slow down. I know pointers, but my working knowledge of them is lacking. My previous exposure to pointers and working experience in &lt;em&gt;Golang&lt;/em&gt; is useful in some ways, but &lt;em&gt;C/C++&lt;/em&gt; pointers are pretty different.&lt;/p&gt;

&lt;h3 id=&#34;expectations:881acfa8d42cd3861f49dfee4e7fd53d&#34;&gt;Expectations&lt;/h3&gt;

&lt;p&gt;What I hope to do is get good enough with &lt;em&gt;C/C++&lt;/em&gt; so that it is easier to read source for things like the &lt;em&gt;Linux&lt;/em&gt; kernel and general &lt;em&gt;GNU&lt;/em&gt; utilities. Eventually, I&amp;rsquo;d like to contribute to these types of things. Hopefully this first step is a step in the right direction.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How I came to Emacs</title>
      <link>http://wmanger.com/post/2016-01-29/</link>
      <pubDate>Sun, 31 Jan 2016 23:57:47 -0700</pubDate>
      
      <guid>http://wmanger.com/post/2016-01-29/</guid>
      <description>

&lt;h3 id=&#34;history:381540646272f34d133c512c66d2c6d4&#34;&gt;History&lt;/h3&gt;

&lt;p&gt;I spent a good chunk of my programming career, probably close to 9 years, inside of the Visual Studio IDE. For the first 5 or so, I didn&amp;rsquo;t understand why I would ever need to step outside of that environment. When I got to college is when I was faced with the hard fact that I could not count on my trusty tool for everything. At the university, they ran all the code on a Sun UNIX machine, which was using its version of GCC and that didn&amp;rsquo;t match up with what VS supplied. I believe there were ways to make it work, but after being burned a few times for submitting uncompilable code, I had to find a different solution that was guaranteed to work every time. As you can probably guess, like anyone who had previously been exposed to a MS Operating System, the first tool on a UNIX box that I reached for was Nano. There was a nice menu that I could understand that had some parallels with notepad.&lt;/p&gt;

&lt;p&gt;Nano got me by for a month or so, but I needed something more powerful. One day I was talking with a master&amp;rsquo;s student that was a TA for one of the courses I was taking and he was programming with what looked like a split terminal with Python&amp;rsquo;s documentation in one pane, syntax highlighting of the Python code that he was working on in another, and some form of autocomplete in yet another. When I asked him what it was he answered proudly &amp;ldquo;VIM&amp;rdquo;. I was blown away with the things he showed me next. What he made happen with minimal keystrokes was impressive. I began playing with VIM in my downtime, and I started to grasp the basics, but when I left the university, it was back to working life and VS was the tool that I was most comfortable with in the end. It won.&lt;/p&gt;

&lt;h3 id=&#34;hand-pain-emulators:381540646272f34d133c512c66d2c6d4&#34;&gt;Hand Pain &amp;amp; Emulators&lt;/h3&gt;

&lt;p&gt;Not all people who use VS or GUI apps will have the same experience, but after using VS and GUI apps in general, I started to experience a slight pain in my hands. I attribute this mostly to reaching for the mouse a lot. Since I will probably be working as a programmer for the rest of my life, I thought that I&amp;rsquo;d better address the issue now before it turns into something that disables me for any length of time. I remembered VIM and how the home row was king. I looked for some sort of emulator for Visual Studio and there were a couple. I chose VSVIM. It was great, but there was still something missing. I could then edit modally using VIM bindings, but navigating VS still required some movement away from the keyboard. What I wanted was complete control of the IDE without having to touch my mouse at all. I am sure there are ways to do this, but from what I found, it wasn&amp;rsquo;t really easy to make happen. But, I was developing in VS under MS, so it was better for me at the time to stick with the standard way of doing things. My hands did feel better with using VIM bindings for editing code, in fact, it was like I had almost been completely cured. Almost.&lt;/p&gt;

&lt;h3 id=&#34;new-stack-new-editor-search:381540646272f34d133c512c66d2c6d4&#34;&gt;New Stack, New Editor Search&lt;/h3&gt;

&lt;p&gt;In my latest position, I don&amp;rsquo;t develop under MS, nor do I use VS. Our stack consists of GO, and JS mostly, so when I joined the team, I was back on the hunt for an editor. I had previously played with Sublime Text 2, and I can&amp;rsquo;t say enough good things about it. The community was great, the plugins were great, and it was so light weight. It even had a &amp;lsquo;vintage mode&amp;rsquo;, which, would give you VIM bindings without having to install a plugin. The GO plugins were pretty solid. Everything seemed great about it. I started using it, but I was left wanting more. I noticed when I used an app outside of the terminal, I had to constantly context switch to get to the terminal and back. I knew VIM was available by terminal and there were ways to get better terminal interaction through a tool called TMUX. I started experimenting with VIM + TMUX and I got to the point where my configuration met my needs. I was happy until one day I watched a video about a long time VIM user moving on to Emacs. It is called:  &lt;a href=&#34;https://www.youtube.com/watch?v=JWD1Fpdd4Pc&#34;&gt;Evil Mode: Or, How I Learned to Stop Worrying and Love Emacs&lt;/a&gt;. It was that video, along with my desire to go through the course work for &lt;a href=&#34;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/&#34;&gt;Structure and Interpretation of Computer Programs&lt;/a&gt; that got me curious about Emacs. I started watching more videos and learning more about the power of Emacs.&lt;/p&gt;

&lt;h3 id=&#34;rabbit-hole-of-regret-pride:381540646272f34d133c512c66d2c6d4&#34;&gt;Rabbit Hole of Regret &amp;amp; Pride&lt;/h3&gt;

&lt;p&gt;As an Emacs beginner, there were so many questions and getting the answers were difficult at first. Simply saving a document was completely different from most editors. Changing Emacs defaults to something sane was pretty difficult too. After all, Emacs configuration is done in Elisp, and that alone should drive away anyone wanting to try it. What I wanted Emacs to do was act like editors that I was used to, but give me Emacs power when I needed it. With Emacs, it&amp;rsquo;s pretty easy to do. Everything Emacs does by default can be controlled in any way. I mean Everything. Also, getting Emacs to do something that it doesn&amp;rsquo;t do by default isn&amp;rsquo;t that difficult once you know a little Elisp. Emacs gives you the ability to create an editor that is not Emacs at all. Ask Linus Torvalds.&lt;/p&gt;

&lt;p&gt;I know what you&amp;rsquo;re thinking: &lt;em&gt;If Emacs is so powerful, why do I have the word &amp;lsquo;Regret&amp;rsquo; in the heading above?&lt;/em&gt; Because, Yak Shaving. Sometimes I just want my editor to do what some other editor does well. I don&amp;rsquo;t want to have to search out some configuration to get Emacs to do something that I think should be default. Nor do I want to look at my Emacs configuration and get caught in a loop of cleaning up the configuration because now I&amp;rsquo;ve seen some other well-organized configs or I know how to hack Elisp better. When you are a beginner, Emacs is a double-edged sword. It is both great and horrible at the same time. There are things that literally blow my mind every time I use it, but occasionally, there are quirks in a certain mode that burn me to the core. Actually, even the horrible parts of Emacs are good if you look at them in the right context. Example: nothing is stopping me from fixing a mode myself and get better at Elisp while helping the community.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What about &amp;lsquo;Pride&amp;rsquo;?&lt;/em&gt; Well, once I do get something configured exactly the way I want it to be, I feel not only proud and accomplished, but also wizardly.&lt;/p&gt;

&lt;h3 id=&#34;wood-working-programming-tools:381540646272f34d133c512c66d2c6d4&#34;&gt;Wood Working &amp;amp; Programming Tools&lt;/h3&gt;

&lt;p&gt;Some time last year I got an itch to start wood working. I still have not been able to fully commit to purchasing all of the tools that I need to really get started, but I have a few. My most complete project was a Shaker style bench, which is complete to the point of finishing. During this project, I got the pleasure of creating one of my own tools. It is called a poor man&amp;rsquo;s router plane. It is basically a piece of 2x4 with a hole drilled in it enough to hold a chisel. It doesn&amp;rsquo;t look like much, but it produces an accurate dado every time. &lt;em&gt;What does this have to do with Emacs?&lt;/em&gt; you say. Well, Emacs provides the same experience. It allows you to tailor your editor to any situation. Any work done in Emacs configuration pays back tenfold. Wood workers have jigs and tools that help their tools be more efficient. Professional Emacs users have configurations that they&amp;rsquo;ve refined over time that make Emacs more efficient for a particular task.&lt;/p&gt;

&lt;h3 id=&#34;but-it-still-doesn-t-make-sense-to-trash-my-current-editor:381540646272f34d133c512c66d2c6d4&#34;&gt;But it still doesn&amp;rsquo;t make sense to trash my current editor&amp;hellip;&lt;/h3&gt;

&lt;p&gt;Don&amp;rsquo;t. The real reason I chose Emacs is: I spend a lot of time in a text editor and I want that time investment to pay off. Emacs allows this completely. If that doesn&amp;rsquo;t sound like something you&amp;rsquo;re interested in doing, you shouldn&amp;rsquo;t.&lt;/p&gt;

&lt;h3 id=&#34;one-more-thing:381540646272f34d133c512c66d2c6d4&#34;&gt;One more thing&lt;/h3&gt;

&lt;p&gt;This whole post I have been referring to Emacs as a text editor. It really is not. It is an Operating System. Some Emacs users never leave Emacs. After all, it does/can have: A web browser, an email client, a twitter client, games, irc, a news reader, a git interface, and much more. Not a lot of editors can say the same thing. I must warn you that when you witness what Emacs can do, you&amp;rsquo;ll want it to do everything. I find myself just wanting to stay in Emacs and get a little annoyed every time I have to leave.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Beginning Again, statically</title>
      <link>http://wmanger.com/post/first/</link>
      <pubDate>Sat, 16 Jan 2016 14:57:47 -0700</pubDate>
      
      <guid>http://wmanger.com/post/first/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve decided to start writing blog posts again since I am learning new things and I&amp;rsquo;d like to document the things I am learning in an attempt to measure progress. With this, a few things have changed. My original blog engine was blogger (very neglected), but I have recently started using &lt;a href=&#34;http://emacsformacosx.com/&#34;&gt;Emacs&lt;/a&gt; and, really, I don&amp;rsquo;t want to leave Emacs. I know there are modes for posting to blogger, but since I am starting to hack Golang, I think using a &lt;a href=&#34;https://gohugo.io/&#34;&gt;static blogging engine written in Go&lt;/a&gt; is appropriate. I don&amp;rsquo;t know of any special functions or modes to make using Hugo easier for the Emacs user, so there is room for me to learn how to make these functions/modes myself. Benefits galore.&lt;/p&gt;

&lt;h3 id=&#34;why:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;Why?&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s a long story, but I am trying out Sacha C&amp;rsquo;s method of learning things. Along with her &lt;a href=&#34;http://pages.sachachua.com/sharing/blog.html#value-blogging&#34;&gt;articles on blogging for learning&lt;/a&gt;, I&amp;rsquo;ve read others who use the same technique for an efficient learning environment. I have many things that I am learning all at once and I need a way to organize and solidify my learning.&lt;/p&gt;

&lt;h3 id=&#34;what-i-ll-post:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;What I&amp;rsquo;ll Post&lt;/h3&gt;

&lt;p&gt;For now, the posts on this blog will mostly relate to programming &amp;ndash; ranging from slightly technical to overly technical. Overly technical posts will have little commentary and mostly code.&lt;/p&gt;

&lt;h3 id=&#34;when-i-ll-post:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;When I&amp;rsquo;ll Post&lt;/h3&gt;

&lt;p&gt;I have no intended schedule and I cannot promise that posts will happen on a regular basis. I will try one post a week. That seems reasonable.&lt;/p&gt;

&lt;h3 id=&#34;goodbye-for-now:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;Goodbye for now&lt;/h3&gt;

&lt;p&gt;Goodbye, until the next post.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>