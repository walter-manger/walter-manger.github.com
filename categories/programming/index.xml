<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on To The Triforce</title>
    <link>http://wmanger.com/categories/programming/</link>
    <description>Recent content in Programming on To The Triforce</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Apr 2016 14:31:11 -0600</lastBuildDate>
    <atom:link href="http://wmanger.com/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Your Software Developer Career Needs Attention</title>
      <link>http://wmanger.com/post/2016-04-16/</link>
      <pubDate>Sat, 16 Apr 2016 14:31:11 -0600</pubDate>
      
      <guid>http://wmanger.com/post/2016-04-16/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve just finished reading the majority of the pages in &lt;a href=&#34;http://www.amazon.com/Soft-Skills-software-developers-manual/dp/1617292397/ref=sr_1_1?ie=UTF8&amp;qid=1460841226&amp;sr=8-1&amp;keywords=softskills&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Soft Skills&lt;/em&gt;&lt;/a&gt; by &lt;a href=&#34;http://www.simpleprogrammer.com&#34; target=&#34;_blank&#34;&gt;John Sonmez&lt;/a&gt;. This book is filled with little chapters dedicated to managing your career as a software developer. What&amp;rsquo;s more is he doesn&amp;rsquo;t just write about the things that pertain directly to developing software. He writes about productivity, finance, fitness, and spirit, which all apply to any career. I can&amp;rsquo;t say that 100% of the book was enlightening, since some of it is common sense, but what did help in the areas where enlightenment wasn&amp;rsquo;t achieved were the &lt;em&gt;Taking Action&lt;/em&gt; sections at the end of each chapter. Coming in at 430 pages and 71 chapters, there is a lot of action to take. I have to admit, taking action on at least 71 things is a bit overwhelming, but the way the book works is: you create your own path. With this book, John is giving you a set of tools that he&amp;rsquo;s used in his career to shape your career. Essentially, you don&amp;rsquo;t have to take action every place he suggests it. You can focus on the areas that are suffering in your career now and come back to the book for guidance in other areas as your career grows.&lt;/p&gt;

&lt;p&gt;The single most important take-away from this book is: being a professional is entirely up to you. You are in charge of your career. You are the boss of your own private corporation, even if you have a boss that pays your bills. Even if you don&amp;rsquo;t feel like you are, you are indeed providing a service. Make sure that you are providing your &lt;em&gt;best&lt;/em&gt; service and it is reliable. Also, make sure that people are aware of your &amp;lsquo;brand&amp;rsquo;. Not thinking this way is actually dangerous &amp;ndash; I&amp;rsquo;ll discuss that later.&lt;/p&gt;

&lt;p&gt;Getting into this mindset helps everyone involved. As an employee, you can guarantee that you are producing your best work because you are focused on helping to build your &amp;lsquo;brand&amp;rsquo;. Employers and management benefit because having developers with this mindset ensures reliable results &amp;ndash; it&amp;rsquo;s a part of their &lt;em&gt;service&lt;/em&gt;. A developer&amp;rsquo;s &lt;em&gt;brand&lt;/em&gt; will always be more important than the company that they are working for (if, of course, the company is not his or her own).&lt;/p&gt;

&lt;p&gt;The content in this book will make you look at how, where, and why you work differently.&lt;/p&gt;

&lt;h3 id=&#34;what-i-am-taking-action-on:5708cad5775323aee349ad2e8dbd3aba&#34;&gt;What I Am Taking Action On&lt;/h3&gt;

&lt;h4 id=&#34;1-teaching:5708cad5775323aee349ad2e8dbd3aba&#34;&gt;1. Teaching&lt;/h4&gt;

&lt;p&gt;I need to focus on teaching what I&amp;rsquo;ve learned. Blogging can be a form of teaching, and one of the reasons I&amp;rsquo;ve started this blog was to teach, but there are more effective ways. Blogging is mostly a one-way street with occasional feedback. Presenting can be by far the most effective with a really tight feedback loop. What I&amp;rsquo;d like to focus on is occasionally presenting at local user groups and more frequently than that use blogging and screen-casting. Blogging and screen-casting more frequently than presenting offers a few advantages. First, it&amp;rsquo;s a way to refine and test the waters on a particular subject. Secondly, it actually gives you a starting point for a subject you&amp;rsquo;d like to present on. I am currently a member of a few meetup groups. I plan on presenting something in the coming months.&lt;/p&gt;

&lt;h4 id=&#34;2-learning:5708cad5775323aee349ad2e8dbd3aba&#34;&gt;2. Learning&lt;/h4&gt;

&lt;p&gt;I need to learn more efficiently. Oddly enough, the ways that I used to learn things were pretty solid, but the techniques that I used took way too much time. &lt;em&gt;Soft Skills&lt;/em&gt; contains a 10 step process for learning things quickly. I am currently trying out this technique. I am also looking at other techniques for future experimentation. The chapters in the learning section of &lt;em&gt;Soft Skills&lt;/em&gt; were valuable to me because they made me question the way that I approach learning something. It has sparked a new excitement in me of the possibilities to hack my own learning process.&lt;/p&gt;

&lt;h4 id=&#34;3-productivity:5708cad5775323aee349ad2e8dbd3aba&#34;&gt;3. Productivity&lt;/h4&gt;

&lt;p&gt;There are entire days where I sit typing at the keyboard and churning out code and yet I feel like I&amp;rsquo;ve accomplished nothing. My estimations have always been off to an extent and my time tracking has always been an afterthought. The chapters on productivity in &lt;em&gt;Soft Skills&lt;/em&gt; have shed some light on the areas that I could improve on to become better at estimation. Time tracking inherently makes estimations more accurate, which makes you more reliable, and in turn, makes your &lt;em&gt;brand&lt;/em&gt; better. I&amp;rsquo;ve started looking into techniques to make this happen &amp;ndash; Pomodoro, GTD, etc.&lt;/p&gt;

&lt;h3 id=&#34;you-should-read-soft-skills:5708cad5775323aee349ad2e8dbd3aba&#34;&gt;&lt;em&gt;You&lt;/em&gt; Should Read &lt;em&gt;Soft Skills&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s taken me about a month of reading it for a few hours a week and I believe it is time well-spent. If you&amp;rsquo;re getting the message, you&amp;rsquo;ll never look at your job or your profession the same way.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go Basics - Pointers</title>
      <link>http://wmanger.com/post/2016-04-08/</link>
      <pubDate>Fri, 08 Apr 2016 23:06:08 -0600</pubDate>
      
      <guid>http://wmanger.com/post/2016-04-08/</guid>
      <description>

&lt;p&gt;Pointers in Go are much more simpler to deal with than their C/C++ counterparts. For one, Go does not allow pointer arithmetic, which is a good thing. Pointer arithmetic can be really confusing at times, no matter how maticulous you write the code.&lt;/p&gt;

&lt;p&gt;A simple example of a pointer in Go:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;99&lt;/span&gt;
&lt;span style=&#34;color: #ffffff&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;&amp;amp;i&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example, we are taking the &lt;em&gt;address&lt;/em&gt; of &lt;code&gt;i&lt;/code&gt; and assigning it to a variable &lt;code&gt;p&lt;/code&gt;. If we were to print the result of &lt;code&gt;p&lt;/code&gt;, we&amp;rsquo;d see something like &lt;code&gt;0x10434114&lt;/code&gt;. If you can imagine memory as a block of cells, &lt;code&gt;i&lt;/code&gt; would be the name of one of the cells, &lt;code&gt;p&lt;/code&gt; would be the cells&amp;rsquo; identifier, and &lt;code&gt;99&lt;/code&gt; would be the cells&amp;rsquo; data.&lt;/p&gt;

&lt;p&gt;The main advantage of using pointers is memory efficiency. Instead of copying values from one variable to another, the address is referenced. Work can still be done on the data that lives at that address through the &lt;em&gt;dereferencing&lt;/em&gt; operator.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;100&lt;/span&gt;   &lt;span style=&#34;color: #008800; font-style: italic; background-color: #0f140f&#34;&gt;// ERROR!&lt;/span&gt;
&lt;span style=&#34;color: #ffffff&#34;&gt;*p&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;100&lt;/span&gt;  &lt;span style=&#34;color: #008800; font-style: italic; background-color: #0f140f&#34;&gt;// Dereference :)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can think of &lt;code&gt;*p&lt;/code&gt; as &lt;code&gt;i&lt;/code&gt; in this case. Consequently, the value of &lt;code&gt;i&lt;/code&gt; is now &lt;code&gt;100&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;why-would-you-use-pointers:4e55f66e458c44c75aa7f611c693d40c&#34;&gt;Why would you use Pointers?&lt;/h3&gt;

&lt;p&gt;I think the more important question is &lt;em&gt;where would you use pointers?&lt;/em&gt; I&amp;rsquo;ll dive into this more in later posts, but for now, know that Go makes use of a concept called &lt;em&gt;Method Receivers&lt;/em&gt;, which define the way methods are attached to &lt;code&gt;struct&lt;/code&gt;. If the &lt;code&gt;struct&lt;/code&gt; needs to be modified by a method, a pointer for that struct is used.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;Blah&lt;/span&gt; &lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #ffffff&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color: #cdcaa9; font-weight: bold&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color: #ffffff&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;(b&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;Blah)&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;Hello()&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #008800; font-style: italic; background-color: #0f140f&#34;&gt;// Not modifying the state of the struct&lt;/span&gt;
  &lt;span style=&#34;color: #008800; font-style: italic; background-color: #0f140f&#34;&gt;// Blah is not a pointer&lt;/span&gt;
  &lt;span style=&#34;color: #ffffff&#34;&gt;fmt.Println(&lt;/span&gt;&lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #ffffff&#34;&gt;fmt.Println(&lt;/span&gt;&lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;Count: &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;b.count)&lt;/span&gt;
&lt;span style=&#34;color: #ffffff&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;(b&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;*Blah)&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;Inc()&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #008800; font-style: italic; background-color: #0f140f&#34;&gt;// Modifying state here&lt;/span&gt;
  &lt;span style=&#34;color: #008800; font-style: italic; background-color: #0f140f&#34;&gt;// *Blah is a pointer, but no need to dereference&lt;/span&gt;
  &lt;span style=&#34;color: #ffffff&#34;&gt;b.count&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;b.count&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color: #ffffff&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t worry if this is confusing. I will be posting more about Structs, Pointers, and Methods. This is just a bite-sized introduction to pointers in Go.&lt;/p&gt;

&lt;p&gt;Until we meet again.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My first contribution to an Emacs package</title>
      <link>http://wmanger.com/post/2016-04-03/</link>
      <pubDate>Sun, 03 Apr 2016 14:21:14 -0600</pubDate>
      
      <guid>http://wmanger.com/post/2016-04-03/</guid>
      <description>

&lt;p&gt;This week I was experimenting with tracking time for work. The goal was to not leave Emacs (as it always is) and be able to adhere to the time tracking software that the company that I work for uses, &lt;a href=&#34;https://www.getharvest.com/&#34;&gt;Harvest&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A quick search produced &lt;a href=&#34;https://github.com/kostajh/harvest.el&#34;&gt;harvest.el&lt;/a&gt;, which was exactly what I needed. After experimenting by tracking a few tasks I noticed that the &lt;em&gt;clock out&lt;/em&gt; function was not working properly. What the function was documented to do was clock out of any running clocked entry. Luckily, I had a little bit of downtime at work and I, forked the repo, opened up the source and began to debug Elisp the only way I know how:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fb660a&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;What is this doing? %s&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #fb660a&#34;&gt;something&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Surprisingly, I was able to figure out the issue pretty quickly (about 15 minutes of hacking). There was what looked like a new variable to keep cached task entries that was not properly being referenced. Basically, there is an operator in Elisp that creates a list, it looks something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;&amp;#39;(&lt;/span&gt;&lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic; background-color: #0f140f&#34;&gt;;; produces a list with elements 1 2 3&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-style: italic; background-color: #0f140f&#34;&gt;;; =&amp;gt; (1 2 3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The function that was causing the problem in my case was taking a variable, that had previously been set to a list of elements and using the &lt;em&gt;&amp;lsquo;&lt;/em&gt; operator on that list. Which produces entirely different results. Using my example above:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;&amp;#39;(&amp;#39;(&lt;/span&gt;&lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;))&lt;/span&gt; 
&lt;span style=&#34;color: #008800; font-style: italic; background-color: #0f140f&#34;&gt;;; =&amp;gt; (quote (1 2 3))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This produced entirely different results and in the context of the function, was unusable. All that needed to be done here was removing the list operator wrapping &lt;em&gt;&amp;rsquo;()&lt;/em&gt;. Here&amp;rsquo;s a peek at my pull request: &lt;a href=&#34;https://github.com/kostajh/harvest.el/pull/15&#34;&gt;PR #15&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-moral-of-this-story-contribute-when-you-can:93bf0e0c1aa53e7b4c0297c4e30c3f29&#34;&gt;The moral of this story: Contribute when you can&lt;/h3&gt;

&lt;p&gt;This fix took me about 30 minutes of total time. That included getting the Pull Request ready for the author. The author appreciated the help and perhaps many of the package users will appreciate it too. We should all help when we can. I learned a little more about Elisp along the way, so it wasn&amp;rsquo;t all giving and not receiving.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript is Lovely/Horrible</title>
      <link>http://wmanger.com/post/2016-03-11/</link>
      <pubDate>Fri, 11 Mar 2016 20:53:12 -0700</pubDate>
      
      <guid>http://wmanger.com/post/2016-03-11/</guid>
      <description>&lt;p&gt;I ran into a little issue today that set me back about 4 hours trying to figure out. Luckily, never again will I spend that amount of time trying to slay this issue. The story goes something like this: I had a normalized object, meaning that each object in my object array was given a unique key and made into a property of an outer object instead of an element of an array. This is the desired behavior. Unfortunately, looping through properties of an object is a little more difficult than simply looping through the indices of an array. Not very difficult, but &lt;em&gt;more&lt;/em&gt; difficult than a simple loop over an array. Here&amp;rsquo;s an example structure.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;entities&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #ffffff&#34;&gt;users:&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #ffffff&#34;&gt;user1:&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #ffffff&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;William Shatner&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #ffffff&#34;&gt;age:&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;22&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #ffffff&#34;&gt;weapons:&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;[{id:&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;sword&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;}]&lt;/span&gt;
        &lt;span style=&#34;color: #ffffff&#34;&gt;},&lt;/span&gt;
        &lt;span style=&#34;color: #ffffff&#34;&gt;user2:&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #ffffff&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;William Shakespeare&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #ffffff&#34;&gt;age:&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;2001&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #ffffff&#34;&gt;weapons:&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;[{id:&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;pen&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;}]&lt;/span&gt;
        &lt;span style=&#34;color: #ffffff&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color: #ffffff&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #ffffff&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I was trying to update the weapons property of one of the user with a payload that came back from a server. So, naturally, what I thought I wanted to do was &lt;em&gt;merge&lt;/em&gt; the results from the server with the results in this structure. A quick look at my favorite JS library &lt;em&gt;lodash&lt;/em&gt; and I came up with the following.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;serverEntities&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #ffffff&#34;&gt;users:&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #ffffff&#34;&gt;user1:&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #ffffff&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;William Shatner&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #ffffff&#34;&gt;age:&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;22&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #ffffff&#34;&gt;weapons:&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;[{id:&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;taser&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;}]&lt;/span&gt;
    &lt;span style=&#34;color: #ffffff&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #ffffff&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #ffffff&#34;&gt;};&lt;/span&gt;

&lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;newUsers&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;merge({},&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;users,&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;serverUsers);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The big issue was: merge was basically ignoring the array because merge isn&amp;rsquo;t a &lt;em&gt;deep&lt;/em&gt; merge.&lt;/p&gt;

&lt;p&gt;I settled on just performing a &lt;em&gt;Deep Copy&lt;/em&gt; of what was coming back from the server and placing it where it needed to be in memory.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;merged&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;merge({},&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;entities,&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;serverEntities)&lt;/span&gt;

&lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;Object.keys(serverEntities))&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;innerKey&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;Object.keys(serverEntities[key]))&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #ffffff&#34;&gt;merged[key][innerKey]&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;_.cloneDeep(serverEntitiesntities[key][innerKey])&lt;/span&gt;
    &lt;span style=&#34;color: #ffffff&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #ffffff&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not really flexible because it only allows for the deep copying of the props 2 levels down, but it gets the job done for the moment.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Side Project Scheduling</title>
      <link>http://wmanger.com/post/2016-03-10/</link>
      <pubDate>Thu, 10 Mar 2016 05:48:27 -0700</pubDate>
      
      <guid>http://wmanger.com/post/2016-03-10/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve recently starting getting up earlier to work on side projects. When I say earlier, I mean, at about 4:15AM. This should give me a good 1.5 hours to work on something and get to a point that I can commit something meaningful before I have to start getting ready for my day. The goal is to get that number down to something like 40-45 minutes so I can spend the other half doing something else like reading or researching new technologies. What I am finding is for that 1.5 hours to be effective, planning the night before is pretty important. I&amp;rsquo;ve spent a few mornings getting up to speed for a half hour. It&amp;rsquo;s really important to eliminate that discovery time.&lt;/p&gt;

&lt;h3 id=&#34;what-am-i-working-on:6bb46f5cad8d6c0d6d2277975909ea07&#34;&gt;What am I working on?&lt;/h3&gt;

&lt;p&gt;When I first wanted to learn Go, I started making a game that could be played in Slack in the form of an integration. It is called &lt;a href=&#34;https://github.com/walter-manger/slack-battle&#34;&gt;Slack Battle&lt;/a&gt;. What I thought would be easy to slap together in a night or so is turning out to be a little more difficult than I&amp;rsquo;d planned. Creating games is difficult &amp;ndash; even really simple ones. Add the requirement for playing games over HTTP and the need for some sort of persistence, and the difficulty increases.&lt;/p&gt;

&lt;h3 id=&#34;the-new-plan:6bb46f5cad8d6c0d6d2277975909ea07&#34;&gt;The &lt;em&gt;New&lt;/em&gt; Plan&lt;/h3&gt;

&lt;p&gt;The project was first created with Google App Engine, but coming back to the project after it had aged a bit, I thought that it would be so much simpler not being boxed into what GAE offers. Really, the only thing GAE was providing me was a datastore. I decided to use Mongolab instead. Why? Because it doesn&amp;rsquo;t really box me in. It feels as if I had an instance of Mongo running locally.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Rip Out GAE&lt;/li&gt;
&lt;li&gt;Integrate Mongo &amp;amp; Mongolab&lt;/li&gt;
&lt;li&gt;Refactor for better readability and prepare for testing&lt;/li&gt;
&lt;li&gt;Add tracking &amp;amp; logging&lt;/li&gt;
&lt;li&gt;Actually write tests&lt;/li&gt;
&lt;li&gt;Create a front-end for testing (React / Angular)&lt;/li&gt;
&lt;li&gt;Deploy to (Digital Ocean, Heroku, &amp;hellip;)&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Well, that was fast Mr. Deitel(s)</title>
      <link>http://wmanger.com/post/C_Quickly/</link>
      <pubDate>Thu, 03 Mar 2016 05:57:47 -0700</pubDate>
      
      <guid>http://wmanger.com/post/C_Quickly/</guid>
      <description>&lt;p&gt;I skimmed through most of the first 4 chapters of &lt;em&gt;C How To Program&lt;/em&gt; and then chapter 5 presents functions. I thought that I would continue skimming through, but then I got to the section on &lt;em&gt;Recursion&lt;/em&gt; and the classic introduction to it through implementing the factorial function.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ff0007; font-weight: bold; font-style: italic; background-color: #0f140f&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #cdcaa9; font-weight: bold&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #ff0086; font-weight: bold&#34;&gt;factorial&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #cdcaa9; font-weight: bold&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color: #ffffff&#34;&gt;main()&lt;/span&gt;
&lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #cdcaa9; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;i;&lt;/span&gt;
  &lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;(i&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;i++)&lt;/span&gt;
    &lt;span style=&#34;color: #ffffff&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;%2d! = %1d\n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;i,&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;factorial(i));&lt;/span&gt;

  &lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #ffffff&#34;&gt;}&lt;/span&gt;


&lt;span style=&#34;color: #cdcaa9; font-weight: bold&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;factorial(&lt;/span&gt;&lt;span style=&#34;color: #cdcaa9; font-weight: bold&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;number)&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;(number&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;else&lt;/span&gt;
    &lt;span style=&#34;color: #ff0086; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;(number&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;factorial(number&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;color: #ffffff&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I have to admit that I feel like I understand Recursion enough to be dangerous. In college, Recursion was hammered into my head pretty quickly and I was able to reason about it with some mathematical techniques, but I can&amp;rsquo;t say that I had full command of the subject. I am glad that the book has promised to discuss recursion in depth for the next few chapters. I am looking forward to attepting some of the exercises in this chapter.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning C/C&#43;&#43; Again</title>
      <link>http://wmanger.com/post/learning-C-again/</link>
      <pubDate>Tue, 01 Mar 2016 04:57:47 -0700</pubDate>
      
      <guid>http://wmanger.com/post/learning-C-again/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been wanting to get back into C/C++ for a while now, but I was unsure how I would go about creating a learning environment. There are many tutorials available out there, but I tend to lean toward structured learning &amp;ndash; like the way you would learn in a classroom setting. I quickly searched on Reddit and some other outlets about the best books to buy, but after reviewing a few, I was left empty handed. As you can probably imagine, the book that gets recommended the most is K&amp;amp;R&amp;rsquo;s &lt;em&gt;The C Programming Language&lt;/em&gt;. I think that it is a great recommendation, but I read that book cover to cover a few years ago. I was looking for something different as most tech books of this nature get boring quickly and most definitely if you are re-reading it.&lt;/p&gt;

&lt;h3 id=&#34;goodwill-ftw:881acfa8d42cd3861f49dfee4e7fd53d&#34;&gt;Goodwill FTW&lt;/h3&gt;

&lt;p&gt;The other day I went to a near by &lt;em&gt;Goodwill&lt;/em&gt; just to see what kind of books would be available and sure enough, gathered among diet books and romantic novels was: &lt;a href=&#34;http://www.amazon.com/C-How-Program-2nd-Edition/dp/0132261197&#34;&gt;&lt;em&gt;C How To Program 2nd Edition&lt;/em&gt;&lt;/a&gt; by &lt;em&gt;Dietel &amp;amp; Dietel&lt;/em&gt;. This book is likely out of date with best practices for modern C, but what I was looking for was a thorough &lt;em&gt;introduction&lt;/em&gt; to C/C++. This looks like it is what I was looking for. It has pretty good reviews on &lt;em&gt;Amazon&lt;/em&gt; too. I plan on picking up some books on modern best practices after this introduction.&lt;/p&gt;

&lt;h3 id=&#34;schedule:881acfa8d42cd3861f49dfee4e7fd53d&#34;&gt;Schedule&lt;/h3&gt;

&lt;p&gt;I don&amp;rsquo;t intend on spending too much time hammering through the entire book. Just a refresher for the first few chapters by skimming through and writing some of the more difficult programs for each chapter. Pointers are presented in Chapter 7, so that&amp;rsquo;s where I&amp;rsquo;ll likely slow down. I know pointers, but my working knowledge of them is lacking. My previous exposure to pointers and working experience in &lt;em&gt;Golang&lt;/em&gt; is useful in some ways, but &lt;em&gt;C/C++&lt;/em&gt; pointers are pretty different.&lt;/p&gt;

&lt;h3 id=&#34;expectations:881acfa8d42cd3861f49dfee4e7fd53d&#34;&gt;Expectations&lt;/h3&gt;

&lt;p&gt;What I hope to do is get good enough with &lt;em&gt;C/C++&lt;/em&gt; so that it is easier to read source for things like the &lt;em&gt;Linux&lt;/em&gt; kernel and general &lt;em&gt;GNU&lt;/em&gt; utilities. Eventually, I&amp;rsquo;d like to contribute to these types of things. Hopefully this first step is a step in the right direction.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>