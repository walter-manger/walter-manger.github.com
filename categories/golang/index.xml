<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on To The Triforce</title>
    <link>http://wmanger.com/categories/golang/index.xml</link>
    <description>Recent content in Golang on To The Triforce</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://wmanger.com/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Go Basics - Pointers</title>
      <link>http://wmanger.com/post/2016-04-08/</link>
      <pubDate>Fri, 08 Apr 2016 23:06:08 -0600</pubDate>
      
      <guid>http://wmanger.com/post/2016-04-08/</guid>
      <description>

&lt;p&gt;Pointers in Go are much more simpler to deal with than their C/C++ counterparts. For one, Go does not allow pointer arithmetic, which is a good thing. Pointer arithmetic can be really confusing at times, no matter how meticulous you write the code.&lt;/p&gt;

&lt;p&gt;A simple example of a pointer in Go:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;99&lt;/span&gt;
&lt;span style=&#34;color: #ffffff&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;&amp;amp;i&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example, we are taking the &lt;em&gt;address&lt;/em&gt; of &lt;code&gt;i&lt;/code&gt; and assigning it to a variable &lt;code&gt;p&lt;/code&gt;. If we were to print the result of &lt;code&gt;p&lt;/code&gt;, we&amp;rsquo;d see something like &lt;code&gt;0x10434114&lt;/code&gt;. If you can imagine memory as a block of cells, &lt;code&gt;i&lt;/code&gt; would be the name of one of the cells, &lt;code&gt;p&lt;/code&gt; would be the cells&amp;rsquo; identifier, and &lt;code&gt;99&lt;/code&gt; would be the cells&amp;rsquo; data.&lt;/p&gt;

&lt;p&gt;The main advantage of using pointers is memory efficiency. Instead of copying values from one variable to another, the address is referenced. Work can still be done on the data that lives at that address through the &lt;em&gt;dereferencing&lt;/em&gt; operator.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;100&lt;/span&gt;   &lt;span style=&#34;color: #008800; font-style: italic; background-color: #0f140f&#34;&gt;// ERROR!&lt;/span&gt;
&lt;span style=&#34;color: #ffffff&#34;&gt;*p&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;100&lt;/span&gt;  &lt;span style=&#34;color: #008800; font-style: italic; background-color: #0f140f&#34;&gt;// Dereference :)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can think of &lt;code&gt;*p&lt;/code&gt; as &lt;code&gt;i&lt;/code&gt; in this case. Consequently, the value of &lt;code&gt;i&lt;/code&gt; is now &lt;code&gt;100&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;why-would-you-use-pointers&#34;&gt;Why would you use Pointers?&lt;/h3&gt;

&lt;p&gt;I think the more important question is &lt;em&gt;where would you use pointers?&lt;/em&gt; I&amp;rsquo;ll dive into this more in later posts, but for now, know that Go makes use of a concept called &lt;em&gt;Method Receivers&lt;/em&gt;, which define the way methods are attached to &lt;code&gt;struct&lt;/code&gt;. If the &lt;code&gt;struct&lt;/code&gt; needs to be modified by a method, a pointer for that struct is used.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #111111&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;Blah&lt;/span&gt; &lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #ffffff&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color: #cdcaa9; font-weight: bold&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color: #ffffff&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;(b&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;Blah)&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;Hello()&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #008800; font-style: italic; background-color: #0f140f&#34;&gt;// Not modifying the state of the struct&lt;/span&gt;
  &lt;span style=&#34;color: #008800; font-style: italic; background-color: #0f140f&#34;&gt;// Blah is not a pointer&lt;/span&gt;
  &lt;span style=&#34;color: #ffffff&#34;&gt;fmt.Println(&lt;/span&gt;&lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ffffff&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #ffffff&#34;&gt;fmt.Println(&lt;/span&gt;&lt;span style=&#34;color: #0086d2&#34;&gt;&amp;quot;Count: &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;b.count)&lt;/span&gt;
&lt;span style=&#34;color: #ffffff&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #fb660a; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;(b&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;*Blah)&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;Inc()&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #008800; font-style: italic; background-color: #0f140f&#34;&gt;// Modifying state here&lt;/span&gt;
  &lt;span style=&#34;color: #008800; font-style: italic; background-color: #0f140f&#34;&gt;// *Blah is a pointer, but no need to dereference&lt;/span&gt;
  &lt;span style=&#34;color: #ffffff&#34;&gt;b.count&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;b.count&lt;/span&gt; &lt;span style=&#34;color: #ffffff&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #0086f7; font-weight: bold&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color: #ffffff&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Don&amp;rsquo;t worry if this is confusing. I will be posting more about Structs, Pointers, and Methods. This is just a bite-sized introduction to pointers in Go.&lt;/p&gt;

&lt;p&gt;Until we meet again.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>